{"meta":{"title":"ReySun","subtitle":null,"description":"Personal Website","author":"ReySun","url":"https://reysun.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-10-13T06:39:24.055Z","updated":"2019-10-12T16:06:32.643Z","comments":false,"path":"/404.html","permalink":"https://reysun.github.io//404.html","excerpt":"","text":"暂无数据"},{"title":"关于","date":"2019-10-13T06:39:24.051Z","updated":"2019-10-12T13:21:03.652Z","comments":false,"path":"about/index.html","permalink":"https://reysun.github.io/about/index.html","excerpt":"","text":"罗立远 web前端开发工程师github地址：https://github.com/ReySun"},{"title":"分类","date":"2019-10-13T06:39:24.056Z","updated":"2019-10-12T09:35:34.170Z","comments":false,"path":"categories/index.html","permalink":"https://reysun.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2019-10-13T06:39:24.051Z","updated":"2019-10-12T09:35:34.170Z","comments":false,"path":"books/index.html","permalink":"https://reysun.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-10-13T06:39:24.053Z","updated":"2019-10-12T09:35:34.170Z","comments":true,"path":"links/index.html","permalink":"https://reysun.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-13T06:39:24.052Z","updated":"2019-10-12T09:35:34.170Z","comments":false,"path":"tags/index.html","permalink":"https://reysun.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-10-13T06:39:24.044Z","updated":"2019-10-12T09:35:34.170Z","comments":false,"path":"repository/index.html","permalink":"https://reysun.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"第二章 正则表达式位置匹配攻略","slug":"books/[JavaScript正则迷你书-老姚] - 2","date":"2019-10-02T02:53:16.000Z","updated":"2019-10-13T08:17:49.082Z","comments":true,"path":"2019/10/02/books/[JavaScript正则迷你书-老姚] - 2/","link":"","permalink":"https://reysun.github.io/2019/10/02/books/[JavaScript正则迷你书-老姚] - 2/","excerpt":"","text":"如何匹配位置呢？ ^ $ \\b \\B (?=p) (?!p) ^ 和 $^（脱字符）匹配开头，在多行匹配中匹配行开头。 $（美元符号）匹配结尾，在多行匹配中匹配行结尾。 比如我们把字符串的开头和结尾用”#”替换（位置可以替换成字符的！）： 123var result = \"hello\".replace(/^|$/g, '#');console.log(result); // =&gt; \"#hello#\" 多行匹配模式时，二者是行的概念，这个需要我们的注意： 1234567var result = \"I\\nlove\\njavascript\".replace(/^|$/gm, '#');console.log(result);/*#I##love##javascript#*/ \\b 和 \\Bb是单词边界，具体就是\\w和\\W之间的位置，也包括\\w和^之间的位置，也包括\\w和$之间的位置。 比如一个文件名是”[JS] Lesson_01.mp4”中的\\b，如下： 123var result = \"[JS] Lesson_01.mp4\".replace(/\\b/g, '#');console.log(result); // =&gt; \"[#JS#] #Lesson_01#.#mp4#\" 为什么是这样呢？这需要仔细看看。首先，我们知道，\\w是字符组[0-9a-zA-Z_]的简写形式，即\\w是字母数字或者下划线的中任何一个字符。而\\W是排除字符组[^0-9a-zA-Z_]的简写形式，即\\W是\\w以外的任何一个字符。此时我们可以看看”[#JS#] #Lesson_01#.#mp4#”中的每一个”#”，是怎么来的。 第一个”#”，两边是”[“与”J”，是\\W和\\w之间的位置。 第二个”#”，两边是”S”与”]”，也就是\\w和\\W之间的位置。 第三个”#”，两边是空格与”L”，也就是\\W和\\w之间的位置。 第四个”#”，两边是”1”与”.”，也就是\\w和\\W之间的位置。 第五个”#”，两边是”.”与”m”，也就是\\W和\\w之间的位置。 第六个”#”，其对应的位置是结尾，但其前面的字符”4”是\\w，即\\w和$之间的位置。 知道了\\b的概念后，那么\\B也就相对好理解了。\\B就是\\b的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉\\b，剩下的都是\\B的。 具体说来就是\\w与\\w、\\W与\\W、^与\\W，\\W与$之间的位置。比如上面的例子，把所有\\B替换成”#”： 123var result = \"[JS] Lesson_01.mp4\".replace(/\\B/g, '#');console.log(result); // =&gt; \"#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4\" (?=p) 和 (?!p)(?=p)，其中p是一个子模式，即p前面的位置。 比如(?=l)，表示’l’字符前面的位置，例如： 123var result = \"hello\".replace(/(?=l)/g, '#');console.log(result); // =&gt; \"he#l#lo\" 而(?!p)就是(?=p)的反面意思，比如： 123var result = \"hello\".replace(/(?!l)/g, '#');console.log(result); // =&gt; \"#h#ell#o#\" 二者的学名分别是positive lookahead和negative lookahead。中文翻译分别是正向先行断言和负向先行断言。ES6中，还支持positive lookbehind和negative lookbehind。具体是(?&lt;=p)和(?&lt;!p)。也有书上把这四个东西，翻译成环视，即看看右边或看看左边。但一般书上，没有很好强调这四者是个位置。 位置的特性把位置理解空字符，是对位置非常有效的理解方式 1234567var result = /^^hello$$$/.test(\"hello\");console.log(result); // =&gt; truevar result = /(?=he)^^he(?=\\w)llo$\\b\\b$/.test(\"hello\");console.log(result); // =&gt; true 相关案例12// 不匹配任何东西的正则var reg = /.^/; 1234// 弄出最后一个逗号var result = \"12345678\".replace(/(?=\\d&#123;3&#125;$)/g, ',')console.log(result); // =&gt; \"12345,678\" 1234// 弄出所有的逗号 因为逗号出现的位置，要求后面3个数字一组，也就是\\d&#123;3&#125;至少出现一次 此时可以使用量词+var result = \"12345678\".replace(/(?=(\\d&#123;3&#125;)+$)/g, ',')console.log(result); // =&gt; \"12,345,678\" 123456789// 不是期望的结果var result = \"123456789\".replace(/(?=(\\d&#123;3&#125;)+$)/g, ',')console.log(result); // =&gt; \",123,456,789\"// 匹配开头可以使用^，但要求这个位置不是开头 (?!^)var result = \"123456789\".replace(/(?!^)(?=(\\d&#123;3&#125;)+$)/g, ',')console.log(result); // =&gt; \",123,456,789\" 1234567// 如果要把\"12345678 123456789\"替换成\"12,345,678 123,456,789\"。// 此时我们需要修改正则，把里面的开头^和结尾$，替换成\\bvar result = \"12345678 123456789\".replace(/(?!\\b)(?=(\\d&#123;3&#125;)+\\b)/g, ',')console.log(result);// 其实(?!\\b)说的就是\\Bvar reg = /\\B(?=(\\d&#123;3&#125;)+\\b)/g; 12345678910111213141516// 密码长度6-12位，由数字、小写字符和大写字母组成var reg = /^[0-9A-Za-z]&#123;6,12&#125;$/;// 要求的必须包含数字 可以用(?=.*[0-9])来做var reg = /(?=.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$/;// 同时包含数字和小写字母，可以用(?=.*[0-9])(?=.*[a-z])来做var reg = /(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]&#123;6,12&#125;$/;// 必须至少包括2种字符var reg = /((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]&#123;6,12&#125;$/;// (?=.*[0-9])表示该位置后面的字符匹配.*[0-9]，即，有任何多个任意字符，后面再跟个数字// 另外一种解法: “至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。var reg = /(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/; 以上信息仅做笔记记录，如有冒犯，请联系我。感谢老姚，附作者掘金地址链接: https://juejin.im/post/59cc61176fb9a00a437b290b","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://reysun.github.io/categories/读书笔记/"}],"tags":[{"name":"《JavaScript正则迷你书》","slug":"《JavaScript正则迷你书》","permalink":"https://reysun.github.io/tags/《JavaScript正则迷你书》/"}]},{"title":"第一章 正则表达式字符匹配攻略","slug":"books/[JavaScript正则迷你书-老姚] - 1","date":"2019-10-01T01:33:50.000Z","updated":"2019-10-13T08:18:01.416Z","comments":true,"path":"2019/10/01/books/[JavaScript正则迷你书-老姚] - 1/","link":"","permalink":"https://reysun.github.io/2019/10/01/books/[JavaScript正则迷你书-老姚] - 1/","excerpt":"","text":"字符组 组合 含义 /d [0-9] 表示是一位数字 /D [^0-9] 除数字外的任意字符 \\w [0-9a-zA-Z_] 表示数字、大小写字母和下划线 \\W [^0-9a-zA-Z_] 非单词字符 \\s [ \\t\\v\\n\\r\\f] 空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符 \\S [^ \\t\\v\\n\\r\\f] 非空字符 . [^\\n\\r\\u2028\\u2029] 通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外 量词 {m,n} 通过在量词后面加个问号就能实现惰性匹配 {m,} 表示至少出现m次。 {m} 等价于{m,m}，表示出现m次 ? 等价于{0,1} + 等价于{1,} * 等价于{0,} 12345// 横向模糊匹配var regexp = /ab&#123;2,5&#125;c/g;var string = \"abc abbc abbbc abbbbc abbbbbc abbbbbbc\";console.log(string.match(regex));// =&gt; [\"abbc\", \"abbbc\", \"abbbbc\", \"abbbbbc\"] 12345// 纵向模糊匹配var regexp = /a[123]b/g;var string = \"a0b a1b a2b a3b a4b\";console.log(string.match(regex));// =&gt; [\"a1b\", \"a2b\", \"a3b\"] 1// 匹配“a”、“-”、“z”这三者中任意一个字符 [-az]或[az-]或[a\\-z] 1// [^abc]，表示是一个除\"a\"、\"b\"、\"c\"之外的任意一个字符 1// 匹配任意字符 [\\d\\D]、[\\w\\W]、[\\s\\S]和[^] 1// [^abc]，表示是一个除\"a\"、\"b\"、\"c\"之外的任意一个字符 12345// 贪婪匹配var regexp = /\\d&#123;2,5&#125;/g;var string = \"123 1234 12345 123456\";console.log( string.match(regex)); // =&gt; [\"123\", \"1234\", \"12345\", \"12345\"] 12345// 惰性匹配var regexp = /\\d&#123;2,5&#125;?/g;var string = \"123 1234 12345 123456\";console.log(string.match(regex)); // =&gt; [\"12\", \"12\", \"34\", \"12\", \"34\", \"12\", \"34\", \"56\"] 12345// 匹配16进制颜色值var regex = /#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g;var string = \"#ffbbad #Fc01DF #FFF #ffE\";console.log(string.match(regex)); // =&gt; [\"#ffbbad\", \"#Fc01DF\", \"#FFF\", \"#ffE\"] 123// 匹配24小时制时间var regexp = /^([01][0-9]|2[0-4]):[0-5][0-9]$/;var regexp = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/; 1234567// 匹配日期/**分析：年，四位数字即可，可用[0-9]&#123;4&#125;。月，共12个月，分两种情况01、02、……、09和10、11、12，可用(0[1-9]|1[0-2])。日，最大31天，可用(0[1-9]|[12][0-9]|3[01])。**/var regexp = /^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/; 以上信息仅做笔记记录，如有冒犯，请联系我。感谢老姚，附作者掘金地址链接: https://juejin.im/post/59cc61176fb9a00a437b290b","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://reysun.github.io/categories/读书笔记/"}],"tags":[{"name":"《JavaScript正则迷你书》","slug":"《JavaScript正则迷你书》","permalink":"https://reysun.github.io/tags/《JavaScript正则迷你书》/"}]},{"title":"react-native 环境问题汇总","slug":"RN环境问题汇总","date":"2019-09-15T13:34:16.000Z","updated":"2019-10-13T08:12:02.614Z","comments":true,"path":"2019/09/15/RN环境问题汇总/","link":"","permalink":"https://reysun.github.io/2019/09/15/RN环境问题汇总/","excerpt":"","text":"执行react-native init PROJECT_NAME之后，卡info Installing required CocoaPods dependencies不动或者很缓慢 手动CTRL+C打断进程，卸载cocoapods，重新设置gem源和安装删除cocoapods sudo gem uninstall cocoapods cocoapods-core gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ gem sources -l sudo gem install cocoapods pod setup 继上面的步骤，进入到项目根目录，手动安装pod，安装过一次之后，后面安装就会很快 cd ios pod install --verbose --no-repo-update 参考链接https://www.cnblogs.com/stevexu/archive/2019/04/21/10745769.htmlhttps://github.com/facebook/react-native/issues/20774https://blog.csdn.net/wzzvictory/article/details/18737437 执行cd RN &amp;&amp; react-native run-ios之后，报错error Could not find &quot;iPhone X&quot; xcode simulator. 切换到xcode simulator，查看可用simulator设备xcrun simctl list devices 或者模拟器查看 指定已存在，如上面的iPhone 11react-native run-ios --simulator=&quot;iPhone 11&quot; 创建react-native项目时，用typescript替换js，注意react-native@0.61.0 or higher与react-native@0.60.x的差异react-native init PROJECT_NAME --template react-native-template-typescript 参考链接https://github.com/facebook/react-native/issues/26727https://github.com/react-native-community/react-native-template-typescript/blob/master/README.md#note-on-the-legacy-clip 在xcode11上启动xcode10项目时报错，Unknown argument type &#39;__attribute__&#39; in method -[RCTAppState getCurrentAppState:error:]. Extend RCTConvert to support this type. 参考链接https://github.com/facebook/react-native/issues/25138https://github.com/facebook/react-native/pull/25146","categories":[{"name":"React Native","slug":"React-Native","permalink":"https://reysun.github.io/categories/React-Native/"}],"tags":[{"name":"react-native","slug":"react-native","permalink":"https://reysun.github.io/tags/react-native/"}]},{"title":"Mac全局安装electron报权限不足的解决方案","slug":"Mac全局安装electron","date":"2019-09-13T12:13:49.000Z","updated":"2019-10-13T07:49:44.535Z","comments":true,"path":"2019/09/13/Mac全局安装electron/","link":"","permalink":"https://reysun.github.io/2019/09/13/Mac全局安装electron/","excerpt":"","text":"设置electron 淘宝源打开终端，输入vim ~/.npmrc,在里面添加 1electron_mirror=\"https://npm.taobao.org/mirrors/electron/\" 设置npm prefix，路径可自定义1npm config set prefix /Users/xx/npm-package 安装electron运行两次npm i -g electron@latest，第一次提示不能创建文件夹，第二次运行即可。 设置全局electron命令 在/Users/xx/npm-package/lib/node_modules/electron下新建electron文件，把cli.js里的内容复杂到文件electron; 把electron设置成可执行文件; 1sudo chmod u+x /Users/xx/npm-packages/lib/node_modules/electron/electron 把可执行文件electron添加到全局变量; 1sudo ln -s /Users/xx/npm-packages/lib/node_modules/electron/electron /usr/local/bin 最简单的方案12# 开机选择recovery模式 打开终端输入csrutil disable 12sudo npm install -g electron --unsafe-perm=true --allow-rootsudo npm i --unsafe-perm=true --allow-root 参考链接https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globallyhttps://www.howtogeek.com/230424/how-to-disable-system-integrity-protection-on-a-mac-and-why-you-shouldnt/","categories":[{"name":"Electron","slug":"Electron","permalink":"https://reysun.github.io/categories/Electron/"}],"tags":[{"name":"electron","slug":"electron","permalink":"https://reysun.github.io/tags/electron/"},{"name":"npm","slug":"npm","permalink":"https://reysun.github.io/tags/npm/"},{"name":"mac","slug":"mac","permalink":"https://reysun.github.io/tags/mac/"}]},{"title":"angular-cli怎么开启本地服务？","slug":"angular-cli怎么开启本地服务？","date":"2017-08-29T13:45:01.000Z","updated":"2019-10-12T13:44:18.816Z","comments":true,"path":"2017/08/29/angular-cli怎么开启本地服务？/","link":"","permalink":"https://reysun.github.io/2017/08/29/angular-cli怎么开启本地服务？/","excerpt":"","text":"为什么会说怎么开启本地服务呢？angular/cli不是默认ng serve的时候有了一个localhost:4200了吗？是这样的：需求是可以让项目组内的其他开发人员可以在她的电脑上预览开发版本的ng应用，说大不大、说小不小，cli开启的localhost地址偏偏不属于本机的IPV4地址。比如我的电脑IPV4地址是192.168.3.108。正常的内网服务是可以用192.168.3.108替代localhost。但是…cli开启的服务偏偏就是访问不了。解决方案也很简单： 查看本机IPV4地址 1ipconfig 执行带参数的ng serve，具体参数前往angular-cli 1ng serve --host=你的IPV4地址","categories":[{"name":"Angular","slug":"Angular","permalink":"https://reysun.github.io/categories/Angular/"}],"tags":[{"name":"angular-cli","slug":"angular-cli","permalink":"https://reysun.github.io/tags/angular-cli/"}]},{"title":"JavaScript之正则匹配字符串的关键词与位置","slug":"javascript之正则匹配字符串关键词与位置","date":"2017-04-11T16:16:23.000Z","updated":"2019-10-12T12:44:24.944Z","comments":true,"path":"2017/04/12/javascript之正则匹配字符串关键词与位置/","link":"","permalink":"https://reysun.github.io/2017/04/12/javascript之正则匹配字符串关键词与位置/","excerpt":"","text":"indexOf/lastIndexOf缺点：不支持正则。如果找到，返回关键词的位置；如果找不到，返回-1。 关键词 位置 否：var i = str.indexOf(“关键词”,fromi) 匹配从第fromi开始，向后找第一个关键词位置 i 否：var i = str.lastIndexOf(“关键词”,fromi) 匹配第从fromi开始，向前找第一个关键词位置 i search其实和indexOf差不多，只是不能指定fromi，默认是从第0个字符开始，向后找第一个关键词位置。支持正则。如果找到，返回关键词的位置；如果找不到，返回-1。 关键词 位置 否：var i = str.search(/正则/) 匹配从0开始，向后找第一个关键词位置 i match强调: 只要一个方法可能返回null，就都要先验证不是null，再使用。强调: 所有正则表达式默认只匹配一个关键词。除非在第二个/后加g,表示全部;加i表示忽略大小写。 关键词 位置 是 kwords[0] ：var kwords = str.match(/正则/) 不加g的情况下才能匹配关键词位置 kwords.index 是 kwords数组 ：var kwords = str.match(/正则/g) 加g的情况下不能匹配关键词位置 exec123456789/* 正则直接量的特殊符号: 直接量中的/都要转为\\/ */var reg = /正则/g;/* 用new的特殊符号: \\ \" '都要转义为:\\\\ \\\" \\' *//* var red = new RegExp(\"正则\",\"g\") */var arr=[];while((arr=reg.exec(str))!=null)&#123; console.log(arr); console.log(\"在位置\"+arr.index+\"发现关键词\"+arr[0]+\"下次从\"+reg.lastIndex+\"开始找\")&#125; 关键词 位置 是 arr[0] ：arr=reg.exec(str) 关键词位置 arr.index","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://reysun.github.io/categories/JavaScript/"}],"tags":[{"name":"字符串正则","slug":"字符串正则","permalink":"https://reysun.github.io/tags/字符串正则/"}]},{"title":"JavaScript之正则表达式","slug":"javascript之正则表达式","date":"2017-04-11T13:38:10.000Z","updated":"2019-10-12T12:36:17.358Z","comments":true,"path":"2017/04/11/javascript之正则表达式/","link":"","permalink":"https://reysun.github.io/2017/04/11/javascript之正则表达式/","excerpt":"","text":"关键词原文最简单的正则，就是关键词原文 1var reg=/hello/ 字符集字符集: 规定1位字符可用的备选字符的列表 代码 说明 [A-Za-z] 1位字母(若要区分大小写分开便是) [0-9] 1位数字 [\\u4e00-\\u9fa5] 1位中文字符 预定义字符集预定义字符集: 对部分常用字符集的简化 代码 说明 \\w 1位字母、数字、下划线 (相当于[A-Za-z0-9_]) \\d 1位数字 (相当于[0-9]) \\s 1位空字符 (空格、换行、Tab) 量词量词: 专门规定一个字符集出现次数的规则 代码 说明 字符集{n,m} 字符集可出现至少n次，最多m次 字符集{n,} 字符集至少出现n次，多了不限 字符集{n} 字符集必须出现n次 字符集? 可有可无，最多一次 字符集* 可有可无，多了不限 字符集+ 至少一次，多个不限 分组和选择 代码 说明 () 分组: 将多个字符集用()包裹为一组 &#124; 选择: 规则1&#124;规则2只要满足其一即可 指定匹配位置 代码 说明 ^ 匹配字符串开始位置 $ 匹配字符串结尾位置 \\b 匹配单词的边界(只要匹配单词，必须前后加\\b) 反义词 代码 说明 . 匹配除换行符以外的任意字符 \\W 匹配任意不是字母，数字，下划线，汉字的字符 \\S 匹配任意不是空白符的字符 \\D 匹配任意非数字的字符 \\B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^Ab1] 匹配除了Ab1这几个字符以外的任意字符","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://reysun.github.io/categories/JavaScript/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"https://reysun.github.io/tags/正则表达式/"}]},{"title":"CSS3渐进增强解决方案","slug":"CSS3渐进增强解决方案","date":"2017-04-06T13:03:10.000Z","updated":"2019-10-12T12:43:52.505Z","comments":true,"path":"2017/04/06/CSS3渐进增强解决方案/","link":"","permalink":"https://reysun.github.io/2017/04/06/CSS3渐进增强解决方案/","excerpt":"","text":"最近的项目需求中频繁的需要做兼容性处理，查阅了很多资料，最有含金量的当属w3help.org/jdshop店铺装修，感谢前辈们栽的树，特地简单的记录常用的css3渐进增强方法，一是方便记忆，二是方便以后查阅修改，如果那里有不妥的地方，望指正。 opacity兼容方案12345678910111213/* 方案一 */.opacity&#123; opacity: 0.5; /*ie9+、现代浏览器*/ filter:alpha(opacity=50); /*ie6/7/8/9*/&#125;/* 方案二 */.opacity&#123; opacity: 0.5; filter:progid:DXImageTransform.Microsoft.alpha(opacity=50); /*ie6/7/8/9*/ -ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(opacity=50)\" /*ie8/9*/&#125;/* IE9下避免重复 */:root .opacity&#123;filter:none;&#125; 使用说明 opacity不同于rgba，会连同该元素的所有子元素一起变透明。 在ie9下，如果opacity和Alpha滤镜同时使用，则Alpha滤镜透明会取代opacity，避免了重复透明的问题。可使用css3的伪类选择符将滤镜的透明度覆盖。 rgba兼容方案123456.rgba&#123; background: rgba(255, 0, 0, 0.5); /* ie9+,FF,Safari,Opera,Chrome */ /* IE6-IE9*/ filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#80FF0000',EndColorStr='#80FF0000'); &#125;:root .rgba&#123;filter:none;&#125; 使用说明 ie滤镜中startColorStr和EndColorStr的前两位是Alpha通道值。Alpha通道值为16进制值. 由于10进制范围为0-255，可通过比例算法将rgba透明值转化为10进制值，再将10进制值转化为16进制值，确保ie滤镜的透明度和rgba的透明度一样。如将rgba透明值0.5转化为16进制值：0.5/1=x/255，x约等于128，128/16=8，则16进制值为80。加上rgba的前三个参数的RGB颜色值转换算为十六进制颜色码（如200,0,0转换为十六进制是：FF0000），则startColorStr和EndColorStr处为’#80FF0000’。 同上,在ie9下，使用css3的伪类选择符避免重复申明的问题。 border-radius兼容方案1234567.border-radius&#123; -moz-border-radius:10px; -webkit-border-radius:10px; border-radius:10px;/*ie9+、现代浏览器*/ behavior:url(此处为ie-css3.htc文件的绝对路径);&#125;:root .border-radius&#123;behavior:url(错误的ie-css3.htc文件路径);&#125;/*ie6/7/8/9*/ 使用说明 ie-css3.htc是一个可以是老IE支持css3的某些属性的文件，需要自行下载引用。 只能同时4角圆角，不能单独设置某一个角。 由于ie9既支持border-radis属性，又支持htc这个文件，所以同时使用会造成圆角失效。这里可使用css3的伪类选择符重定义一个错误的路径将htc这个文件路径覆盖，重而使用ie9本身支持的border-radius圆角效果。 box-shadow兼容方案12345678910111213141516/* 引入htc文件的方式 */.box-shadow&#123; -moz-box-shadow:0px 0px 10px #333 inset;/*必须写0px，而不是0*/ -webkit-box-shadow:0px 0px 10px #333 inset; box-shadow:0px 0px 10px #333 inset; behavior:url(此处为ie-css3.htc文件的绝对路径);&#125;:root .border-radius&#123;behavior:url(错误的ie-css3.htc文件路径);&#125;/* filter方式 */.box-shadow&#123; -moz-box-shadow:0px 0px 10px #333 inset; -webkit-box-shadow:0px 0px 10px #333 inset; box-shadow:0px 0px 10px #333 inset; filter: progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=135, Color='#999999');&#125;:root .box-shadow&#123;filter:none;&#125; 使用说明 htc文件模拟的阴影只读取了box-shadow里面设置的模糊半径值，且效果和box-shadow的效果有差异。不支持inset内阴影。阴影在IE中只会显示为黑色，不管你设置成其它什么颜色。 ie9下，如果box-shadow设置了inset属性，htc文件会造成元素的背景色失效，所以这里可使用css3的伪类选择符重定义一个错误的路径将htc这个文件路径覆盖，重而使用ie9本身支持的box-shadow内部阴影效果。 同样，引用filter方法也应该去重filter。 text-shadowtext-shadow的用法参考博主 水木 的这篇博客。有需求的时候记得来感谢感谢。 transform直接看W3C的说明文档transform transitiontransition animationanimation","categories":[{"name":"CSS","slug":"CSS","permalink":"https://reysun.github.io/categories/CSS/"}],"tags":[{"name":"浏览器兼容性处理","slug":"浏览器兼容性处理","permalink":"https://reysun.github.io/tags/浏览器兼容性处理/"}]},{"title":"MongoDB常用增删改查语句","slug":"mongodb常用增删改查语句","date":"2017-02-24T10:59:01.000Z","updated":"2019-10-12T12:36:50.889Z","comments":true,"path":"2017/02/24/mongodb常用增删改查语句/","link":"","permalink":"https://reysun.github.io/2017/02/24/mongodb常用增删改查语句/","excerpt":"","text":"数据库database创建及查看库 有则使用这个数据库，没有就创建 1use DATABASE_NAME 查看当前选择的数据库，默认是test 1db 查看数据库，默认有admin、local和”test”，如果数据库生成但是没有集合（下面会讲）所以此时只有逻辑数据库产生并没有真正意义上的物理数据，这样看不到查询结果 1show dbs 删除库 删除选定的数据库，如果还没有选择任何数据库，然后它会删除默认的 ‘ test’ 数据库，执行成功返回{ “dropped” : DATABASE_NAME, “ok” : 1 }1db.dropDatabase() 集合collection(相当于SQL数据库中的表table)创建及查看集合 查看集合 1show collections 以下注释只为方便阅读，请勿在命令行使用 123456db.createCollection(name, &#123; //集合的名字 capped: &lt;Boolean&gt;, //是否启用集合限制，如果开启需要制定一个限制条件，默认为不启用，这个参数没有实际意义 autoIndexId: &lt;Boolean&gt;, //是否使用_id作为索引，默认为使用(true或false) size: &lt;number&gt;, //限制集合使用空间的大小，默认为没有限制,size的优先级比max要高 max &lt;number&gt;&#125; //集合中最大条数限制，默认为没有限制) 特殊情况，若没有newdbc集合，会自动创建集合newdbc并插入数据 1db.newdbc.insert(&#123;\"name\" : \"yiibai\"&#125;) 常用方法介绍 没有任何的大小，数量限制，使用_id作为默认索引db.createCollection(name) 1db.createCollection(\"log\") 限制它的空间大小为1M，如果超过1M的大小，则会删除最早的记录 12db.createCollection(\"log\",&#123;size:1024&#125;)db.createCollection(\"log\"，&#123;capped:true,size:1024&#125;) 最大条数为1024条，超过1024再插入数据的话会删除最早的一条记录。这个不能使用capped:true，否则会报错db.createCollection(name) 1db.createCollection(\"log\",&#123;max:1024&#125;) 限制集合最大使用空间为1M，最大条数为1024条 12db.createCollection(\"log\",&#123;size:1024,max:1024&#125;)db.createCollection(\"log\",&#123;capped:true,size:1024,max:1024&#125;) 删除集合 执行成功返回true，否则将返回 false1db.COLLECTION_NAME.drop() 文档document(相当于SQL数据库中的列column)增(insert) 单条数据插入 1db.user.insert(&#123;\"name\":\"jack\",\"age\":20&#125;) 批量数据插入采用命令行for循环 删(remove) 不带参数会删除全部数据，且不可恢复，切记！1db.user.remove(&#123;\"name\":\"joe\"&#125;) 改(update) 整体更新 123var model = db.user.findOne(&#123;\"name\":\"jack\"&#125;)model.age=30db.user.update(&#123;\"name\":\"jack\"&#125;,model) 局部更新 $inc修改器——比如我们做一个在线用户状态记录，每次修改会在原有的基础上自增$inc指定的值，如果“文档”中没有此key，则会创建key 1db.user.update(&#123;\"name\":\"jack\"&#125;,&#123;$inc:&#123;\"age\":30&#125;&#125;) //年龄增加30 $set修改器 1db.user.update(&#123;\"name\":\"jack\"&#125;,&#123;$set:&#123;\"age\":10&#125;&#125;) //年龄变为10 upsert操作——如果没有查到，就在数据库里面新增一条，使用起来很简单，将update的第三个参数设为true即可。 批量更新——在mongodb中如果匹配多条，默认的情况下只更新第一条，那么如果我们有需求必须批量更新，那么在mongodb中实现也是很简单的，在update的第四个参数中设为true即可 查(find) 查找key=value的数据 1db.collection.find(&#123; \"key\" : value &#125;) key &gt; value 1db.collection.find(&#123; \"key\" : &#123; $gt: value &#125; &#125;) key &lt; value 1db.collection.find(&#123; \"key\" : &#123; $lt: value &#125; &#125;) key &gt;= value 1db.collection.find(&#123; \"key\" : &#123; $gte: value &#125; &#125;) key &lt;= value 1db.collection.find(&#123; \"key\" : &#123; $lte: value &#125; &#125;) value1 &lt; key &lt;value2 1db.collection.find(&#123; \"key\" : &#123; $gt: value1 , $lt: value2 &#125; &#125;) key &lt;&gt; value 1db.collection.find(&#123; \"key\" : &#123; $ne: value &#125; &#125;) 取模运算，条件相当于key % 10 == 1 即key除以10余数为1的 1db.collection.find(&#123; \"key\" : &#123; $mod : [ 10 , 1 ] &#125; &#125;) 不属于，条件相当于key的值不属于[ 1, 2, 3 ]中任何一个 1db.collection.find(&#123; \"key\" : &#123; $nin: [ 1, 2, 3 ] &#125; &#125;) 属于，条件相当于key等于[ 1, 2, 3 ]中任何一个 1db.collection.find(&#123; \"key\" : &#123; $in: [ 1, 2, 3 ] &#125; &#125;) $size 数量、尺寸，条件相当于key的值的数量是1（key必须是数组，一个值的情况不能算是数量为1的数组） 1db.collection.find(&#123; \"key\" : &#123; $size: 1 &#125; &#125;) $exists 字段存在，true返回存在字段key的数据，false返回不存在字度key的数据 1db.collection.find(&#123; \"key\" : &#123; $exists : true|false &#125; &#125;) 正则，类似like；“i”忽略大小写，“m”支持多行.如joe会匹配出来 1db.collection.find(&#123; \"name\":/^j/,\"name\":/e$/ &#125;) $or或 （注意：MongoDB 1.5.3后版本可用），符合条件a=1的或者符合条件b=2的数据都会查询出来 1db.collection.find(&#123; $or : [&#123;a : 1&#125;, &#123;b : 2&#125; ] &#125;) 符合条件key=value ，同时符合其他两个条件中任意一个的数据 1db.collection.find(&#123; \"key\": value , $or : [&#123; a : 1 &#125; , &#123; b : 2 &#125;] &#125;) 内嵌对象中的值匹配，注意：”key.subkey”必须加引号 1db.collection.find(&#123; \"key.subkey\" :value &#125;) 这是一个与其他查询条件组合使用的操作符，不会单独使用。上述查询条件得到的结果集加上$not之后就能获得相反的集合。 1db.collection.find(&#123; \"key\": &#123; $not : /^val.val$/i &#125; &#125;) $where中的value,可以写成类似js的形式 1db.collection.find(&#123; $where:function()&#123;return this.name==\"joe\"&#125; &#125;)","categories":[{"name":"Mongo","slug":"Mongo","permalink":"https://reysun.github.io/categories/Mongo/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://reysun.github.io/tags/mongodb/"}]},{"title":"MongoDB安装及环境配置","slug":"mongodb安装与环境配置","date":"2017-02-24T09:59:01.000Z","updated":"2019-10-12T12:36:40.749Z","comments":true,"path":"2017/02/24/mongodb安装与环境配置/","link":"","permalink":"https://reysun.github.io/2017/02/24/mongodb安装与环境配置/","excerpt":"","text":"下载安装首先，下载安装MongoDB，根据自己的电脑配置下载合适的版本（以下以win7为例），ok，下载之后我就安装到”D盘”，可以根据需要安装在其他位置。 启动启动之前，我们要给mongodb指定一个文件夹，这里取名为”mongodb”，用来存放mongodb的数据。文件目录格式参考如下图，data下的db专门存放数据，log下的MongoDB.log为日志存放文件。 两个命令启动数据库 mongod：是mongoDB数据库进程本身 mongo：是命令行shell客户端 进入到mongodb安装目录下的bin文件夹下(以下简称bin目录)。 指定存储位置及开启服务 这里的意思是：dbpath指数据存放位置，logpath指日志存放文件，并且安装windows服务(运行成功后，win7下直接开始菜单搜索服务，便可以查看“MongoDB”服务，最好改为自动启动或延迟启动)，这样可以避免每次敲很长的启动代码。1mongod --dbpath \"E:\\mongodb\\data\\db\" --logpath \"E:\\mongodb\\data\\log\\MongoDB.log\" --install --serviceName \"MongoDB\" 启动成功 重新在bin目录下打开命令行，输入mongo（或者直接点击mongo.exe，看到connecting to: mongodb://127.0.0.1:27017）,至此就可以进行mongo的shell客户端操作了。 如果你有单独的项目，想把数据库放在本地APP项目下。 可直接在项目顶层目录新建文件夹data，然后进入bin目录 1mongod --dbpath 本地APP目录\\data\\ 再次进入bin目录，打开第二个命令行，此窗口进行mongo数据操作 1mongo","categories":[{"name":"Mongo","slug":"Mongo","permalink":"https://reysun.github.io/categories/Mongo/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://reysun.github.io/tags/mongodb/"}]},{"title":"CSS 边框三角形制作","slug":"css三角形","date":"2017-02-09T04:55:10.000Z","updated":"2019-10-12T12:35:15.024Z","comments":true,"path":"2017/02/09/css三角形/","link":"","permalink":"https://reysun.github.io/2017/02/09/css三角形/","excerpt":"","text":"由浅入深的介绍border属性，方便记忆。内联样式只为便于观察，最好避免此写法，采用更优的方案。 定义通用css1234div&#123; width:0; height:0;&#125; 只有上边框1&lt;div style=\"border-top: 50px solid red;\"&gt;&lt;/div&gt; 效果图：上下占50px，但是看不见实际颜色。 只有上下边框123&lt;div style=\"border-top: 50px solid red; border-bottom: 50px solid blue;\"&gt;&lt;/div&gt; 效果图：原理同上，上下占100px，看不见实际颜色。 只有上左下边框1234&lt;div style=\"border-top: 50px solid red; border-bottom: 50px solid blue; border-left: 50px solid yellow;\"&gt;&lt;/div&gt; 效果图：终于看见颜色了，说明必须相邻的边框搭配才会看见颜色。 正上角12345&lt;!-- triangle-up --&gt;&lt;div style=\"border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red;\"&gt;&lt;/div&gt; 效果图：下边框100px，左右透明。 正下角12345&lt;!-- triangle-down --&gt;&lt;div style=\"border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 100px solid red;\"&gt;&lt;/div&gt; 效果图：上边框100px，左右透明。 正左角12345&lt;!-- triangle-left --&gt;&lt;div style=\"border-top: 50px solid transparent; border-bottom: 50px solid transparent; border-right: 100px solid red;\"&gt;&lt;/div&gt; 效果图：右边框100px，上下透明。 正右角12345&lt;!-- triangle-right --&gt;&lt;div style=\"border-top: 50px solid transparent; border-bottom: 50px solid transparent; border-left: 100px solid red;\"&gt;&lt;/div&gt; 效果图：左边框100px，上下透明。 下面更精彩哦！ 左上角1234567&lt;!-- triangle-topleft --&gt;&lt;div style=\"border-top: 100px solid red; border-right: 100px solid transparent;\"&gt;&lt;/div&gt;&lt;div style=\"border-left: 100px solid red; border-bottom: 100px solid transparent;\"&gt;&lt;/div&gt; 效果图：上面的两个div对应下面的两个角。 相信看到这里，你应该知道css边框的原理了，快快动手试试右上、左下、右下的三角形吧。。。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://reysun.github.io/categories/CSS/"}],"tags":[{"name":"边框三角形","slug":"边框三角形","permalink":"https://reysun.github.io/tags/边框三角形/"}]},{"title":"JavaScript之API重构","slug":"javascript之API重构","date":"2017-01-24T09:59:01.000Z","updated":"2019-10-12T12:36:33.743Z","comments":true,"path":"2017/01/24/javascript之API重构/","link":"","permalink":"https://reysun.github.io/2017/01/24/javascript之API重构/","excerpt":"","text":"检索indexOf方式一：添加函数 123456789function indexof(arr,val,fromi)&#123; fromi==undefined&amp;&amp;(fromi=0); for(;fromi&lt;arr.length;fromi++)&#123; if(arr[fromi]==val)&#123; return fromi; &#125; &#125; return -1;&#125; 方式二：Array的原型上添加方法 12345678910if(Array.prototype.indexOf===undefined)&#123; Array.prototype.indexOf=function(val,fromi)&#123; fromi===undefined&amp;&amp;(fromi=0); for(;fromi&lt;this.length;fromi++)&#123; if(this[fromi]==val)&#123; return fromi&#125; &#125; return -1; &#125;&#125; 字符串排重方法一 1234567891011121314function unique1(arr)&#123; for(var i=0,new_arr=[];i&lt;2;i++)&#123; for(var j=0;j&lt;new_arr.length;j++)&#123; if(new_arr[j]==arr[i])&#123; break; &#125; &#125; if(j==new_arr.length)&#123; new_arr[j]=arr[i] &#125; //console.log(new_arr[j]) &#125; return new_arr&#125; 方法二 123456789101112function unique2(arr)&#123; for(var i=0,hash=[];i&lt;arr.length;i++)&#123; if(hash[arr[i]]==undefined)&#123;hash[arr[i]]=1;console.log(hash);&#125; &#125; var i=0,keys=[]; for(keys[i++] in hash);//省略分号则表示循环一次，关联数组循环特殊性 /*for(var k in hash)&#123; keys[i++]=k &#125;*/ return keys&#125; 去除空格trim方式一：添加函数 123456789101112//去除左空格function ltrim(str)&#123; return str.replace(/^\\s+/,\"\")&#125;//去除右空格function rtrim(str)&#123; return str.replace(/\\s+$/,\"\")&#125;//去除左右两边的空格function trim(str)&#123; return str.replace(/^\\s+|\\s+$/,\"\")&#125; 方式二：String的原型上添加方法 1234567if(String.prototype.trim==undefined)&#123; String.prototype.trim=function()&#123; return this.replace(/^\\s+|\\s+$/g,\"\") &#125;&#125;var str=\" dd xx \";console.log(str.trim()) 四舍五入round12345678910function round(num,d)&#123; /* num=num*Math.pow(10,d); num=parseInt(Math.round(num)); num=num*Math.pow(10,-d); */ num=Math.round(num*Math.pow(10,d)) /Math.pow(10,d) return num&#125; isArrayisArray是ES5新属性 123456789101112131415if(Array.isArray==undefined)&#123; Array.isArray=function(obj)&#123; if(Object.prototype.toString.call(obj)==\"[object Array]\")&#123; return true; &#125;else&#123; return false; &#125; &#125;&#125;var n=1,s=\"hello\",b=true,nu=null,un=undefined,fun=function()&#123;&#125;,obj=&#123;&#125;,arr=[],obj2=&#123;&#125;;console.log( Array.isArray(obj), Array.isArray(arr), Array.isArray(obj2)) bind创建bind函数，兼容IE 8 123456789101112if(Function.prototype.bind===undefined)&#123; Function.prototype.bind=function(obj)&#123; //this-&gt;原函数对象 var fun=this; //将arguments转化为纯正的数组，选取1之后的所有元素 var args1=Array.prototype.slice.call(arguments,1);//arguments.slice(1) return function()&#123; var args2=Array.prototype.slice.call(arguments); fun.apply(obj,args1.concat(args2)) &#125; &#125;&#125; 进制转换num.toString(n)1234567891011function dec2bin(dec)&#123; var bin=[]; while(dec&gt;0)&#123; bin.unshift(dec%2); dec=parseInt(dec/2); &#125; return bin.join(\"\");&#125;var n=90;console.log(dec2bin(n));console.log(n.toString(2)); every()和some()123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263var arr1=[1,5,3,7,9];var arr2=[2,4,8,6,10];var arr3=[1,2,3,6,9];if(Array.prototype.every===undefined)&#123; Array.prototype.every=function(call)&#123; for(var i=0;i&lt;this.length;i++)&#123; if(i in this)&#123;//arr[\"0\"] //if(this[i]!==undefined)&#123; var r=call(this[i],i,this) if(!r)&#123; return false&#125; &#125; &#125; return true &#125;&#125;;if(Array.prototype.some===undefined)&#123; Array.prototype.some=function(call)&#123; for(var i=0;i&lt;this.length;i++)&#123; if(i in this)&#123;//arr[\"0\"] //if(this[i]!==undefined)&#123; var r=call(this[i],i,this) if(!r)&#123; return true&#125; &#125; &#125; return false &#125;&#125;;console.log( arr1.every(function(val)&#123; return val%2==1 &#125;)+\"&lt;br&gt;\"+ arr2.every(function(val)&#123; return val%2==1 &#125;)+\"&lt;br&gt;\"+ arr3.every(function(val)&#123; return val%2==1 &#125;));console.log( arr1.some(function(val)&#123; return val%2==1 &#125;)+\"&lt;br&gt;\"+ arr2.some(function(val)&#123; return val%2==1 &#125;)+\"&lt;br&gt;\"+ arr3.some(function(val)&#123; return val%2==1 &#125;))console.log( arr1.every(function(val,idx,arr)&#123; return idx&lt;arr.length-1?val&lt;=arr[idx+1]:true &#125;)+\"&lt;br&gt;\"+ arr2.every(function(val,idx,arr)&#123; return idx&lt;arr.length-1?val&lt;=arr[idx+1]:true &#125;)+\"&lt;br&gt;\"+ arr3.every(function(val,idx,arr)&#123; return idx&lt;arr.length-1?val&lt;=arr[idx+1]:true &#125;));","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://reysun.github.io/categories/JavaScript/"}],"tags":[{"name":"API重构","slug":"API重构","permalink":"https://reysun.github.io/tags/API重构/"}]}]}